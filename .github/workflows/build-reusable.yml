name: Build and Package Mouser Reusable

on:
  workflow_call:

permissions:
  attestations: write
  contents: read
  id-token: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - run: python -m pip install --upgrade pip

      - run: pip install --upgrade setuptools wheel

      - run: pip install -r requirements.txt pyinstaller importlib-metadata sacremoses tokenizers

      - run: pip uninstall -y typing

      - run: |
          pyinstaller --noconfirm --noconsole --onedir -c \
            --copy-metadata tqdm \
            --copy-metadata regex \
            --copy-metadata sacremoses \
            --copy-metadata requests \
            --copy-metadata packaging \
            --copy-metadata filelock \
            --copy-metadata tokenizers \
            --copy-metadata importlib_metadata \
            --collect-data sv_ttk \
            --hidden-import "babel.numbers" \
            --add-data "shared/images/*:shared/images" \
            --add-data "shared/sounds/*:shared/sounds" \
            --add-data "settings:settings" \
            --add-data "version.py:." \
            main.py
        shell: bash

      # Platform-specific executable renaming
      - name: Rename executable (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: cmd
        run: ren dist\main\main.exe Mouser.exe

      - name: Rename executable (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: mv dist/main/main dist/main/Mouser

      - name: Rename executable (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: mv dist/main/main dist/main/Mouser

      # Platform-specific packaging
      - name: Package build (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: powershell
        run: Compress-Archive -Path dist/main/* -DestinationPath dist/Mouser_windows.zip -Force

      - name: Package build (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: cd dist && zip -r Mouser_macos.zip main/

      - name: Package build (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: cd dist && zip -r Mouser_linux.zip main/

      # Attestation and upload
      - uses: actions/attest-build-provenance@v1
        with:
          subject-path: dist/Mouser_*.zip

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Mouser_${{ matrix.os }}
          path: dist/Mouser_*.zip
